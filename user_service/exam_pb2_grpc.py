# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import exam_pb2 as exam__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in exam_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ExamServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetExam = channel.unary_unary(
                '/exams.ExamService/GetExam',
                request_serializer=exam__pb2.ExamRequest.SerializeToString,
                response_deserializer=exam__pb2.ExamResponse.FromString,
                _registered_method=True)
        self.ListExams = channel.unary_unary(
                '/exams.ExamService/ListExams',
                request_serializer=exam__pb2.Empty.SerializeToString,
                response_deserializer=exam__pb2.ListExamsResponse.FromString,
                _registered_method=True)
        self.CreateExam = channel.unary_unary(
                '/exams.ExamService/CreateExam',
                request_serializer=exam__pb2.CreateExamRequest.SerializeToString,
                response_deserializer=exam__pb2.CreateExamResponse.FromString,
                _registered_method=True)
        self.AssignExam = channel.unary_unary(
                '/exams.ExamService/AssignExam',
                request_serializer=exam__pb2.AssignExamRequest.SerializeToString,#serializes the request to be sent to server to protobuf wire format
                response_deserializer=exam__pb2.AssignExamResponse.FromString,
                _registered_method=True)#makes it a registered RPC call
        self.GetExamsByStudent = channel.unary_unary(
                '/exams.ExamService/GetExamsByStudent',
                request_serializer=exam__pb2.StudentRequest.SerializeToString,
                response_deserializer=exam__pb2.ListExamsResponse.FromString,
                _registered_method=True)
        self.GetExamsByTeacher = channel.unary_unary(
                '/exams.ExamService/GetExamsByTeacher',
                request_serializer=exam__pb2.TeacherRequest.SerializeToString,
                response_deserializer=exam__pb2.ListExamsResponse.FromString,
                _registered_method=True)
        self.AttemptExam = channel.unary_unary(
                '/exams.ExamService/AttemptExam',
                request_serializer=exam__pb2.AttemptExamRequest.SerializeToString,
                response_deserializer=exam__pb2.AttemptExamResponse.FromString,
                _registered_method=True)


class ExamServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListExams(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssignExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExamsByStudent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExamsByTeacher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AttemptExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetExam': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExam,
                    request_deserializer=exam__pb2.ExamRequest.FromString,
                    response_serializer=exam__pb2.ExamResponse.SerializeToString,
            ),
            'ListExams': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExams,
                    request_deserializer=exam__pb2.Empty.FromString,
                    response_serializer=exam__pb2.ListExamsResponse.SerializeToString,
            ),
            'CreateExam': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateExam,
                    request_deserializer=exam__pb2.CreateExamRequest.FromString,
                    response_serializer=exam__pb2.CreateExamResponse.SerializeToString,
            ),
            'AssignExam': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignExam,
                    request_deserializer=exam__pb2.AssignExamRequest.FromString,
                    response_serializer=exam__pb2.AssignExamResponse.SerializeToString,
            ),
            'GetExamsByStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExamsByStudent,
                    request_deserializer=exam__pb2.StudentRequest.FromString,
                    response_serializer=exam__pb2.ListExamsResponse.SerializeToString,
            ),
            'GetExamsByTeacher': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExamsByTeacher,
                    request_deserializer=exam__pb2.TeacherRequest.FromString,
                    response_serializer=exam__pb2.ListExamsResponse.SerializeToString,
            ),
            'AttemptExam': grpc.unary_unary_rpc_method_handler(
                    servicer.AttemptExam,
                    request_deserializer=exam__pb2.AttemptExamRequest.FromString,
                    response_serializer=exam__pb2.AttemptExamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exams.ExamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('exams.ExamService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ExamService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/GetExam',
            exam__pb2.ExamRequest.SerializeToString,
            exam__pb2.ExamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListExams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/ListExams',
            exam__pb2.Empty.SerializeToString,
            exam__pb2.ListExamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/CreateExam',
            exam__pb2.CreateExamRequest.SerializeToString,
            exam__pb2.CreateExamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssignExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/AssignExam',
            exam__pb2.AssignExamRequest.SerializeToString,
            exam__pb2.AssignExamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExamsByStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/GetExamsByStudent',
            exam__pb2.StudentRequest.SerializeToString,
            exam__pb2.ListExamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExamsByTeacher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/GetExamsByTeacher',
            exam__pb2.TeacherRequest.SerializeToString,
            exam__pb2.ListExamsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AttemptExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/exams.ExamService/AttemptExam',
            exam__pb2.AttemptExamRequest.SerializeToString,
            exam__pb2.AttemptExamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
