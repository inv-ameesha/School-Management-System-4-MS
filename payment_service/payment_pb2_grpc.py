# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import payment_pb2 as payment__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in payment_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class PaymentServiceStub(object):
    """Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AllocateFee = channel.unary_unary(
                '/payment.PaymentService/AllocateFee',
                request_serializer=payment__pb2.FeeAllocationRequest.SerializeToString,
                response_deserializer=payment__pb2.FeeAllocationResponse.FromString,
                _registered_method=True)
        self.AllocateFeeForStudent = channel.unary_unary(
                '/payment.PaymentService/AllocateFeeForStudent',
                request_serializer=payment__pb2.AllocateFeeForStudentRequest.SerializeToString,
                response_deserializer=payment__pb2.AllocateFeeForStudentResponse.FromString,
                _registered_method=True)
        self.GetStudentFees = channel.unary_unary(
                '/payment.PaymentService/GetStudentFees',
                request_serializer=payment__pb2.StudentFeeRequest.SerializeToString,
                response_deserializer=payment__pb2.StudentFeeListResponse.FromString,
                _registered_method=True)
        self.GetPaymentOptions = channel.unary_unary(
                '/payment.PaymentService/GetPaymentOptions',
                request_serializer=payment__pb2.Empty.SerializeToString,
                response_deserializer=payment__pb2.PaymentOptionsResponse.FromString,
                _registered_method=True)
        self.InitiatePayment = channel.unary_unary(
                '/payment.PaymentService/InitiatePayment',
                request_serializer=payment__pb2.InitiatePaymentRequest.SerializeToString,
                response_deserializer=payment__pb2.InitiatePaymentResponse.FromString,
                _registered_method=True)
        self.VerifyRazorpayPayment = channel.unary_unary(
                '/payment.PaymentService/VerifyRazorpayPayment',
                request_serializer=payment__pb2.VerifyRazorpayRequest.SerializeToString,
                response_deserializer=payment__pb2.VerifyRazorpayResponse.FromString,
                _registered_method=True)
        self.SimulateRazorpayPayment = channel.unary_unary(
                '/payment.PaymentService/SimulateRazorpayPayment',
                request_serializer=payment__pb2.SimulateRazorpayRequest.SerializeToString,
                response_deserializer=payment__pb2.SimulateRazorpayResponse.FromString,
                _registered_method=True)
        self.GetStudent = channel.unary_unary(
                '/payment.PaymentService/GetStudent',
                request_serializer=payment__pb2.GetStudentRequest.SerializeToString,
                response_deserializer=payment__pb2.GetStudentResponse.FromString,
                _registered_method=True)
        self.GenerateReceipt = channel.unary_unary(
                '/payment.PaymentService/GenerateReceipt',
                request_serializer=payment__pb2.GenerateReceiptRequest.SerializeToString,
                response_deserializer=payment__pb2.GenerateReceiptResponse.FromString,
                _registered_method=True)


class PaymentServiceServicer(object):
    """Service
    """

    def AllocateFee(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateFeeForStudent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStudentFees(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPaymentOptions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitiatePayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyRazorpayPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimulateRazorpayPayment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStudent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateReceipt(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaymentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AllocateFee': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateFee,
                    request_deserializer=payment__pb2.FeeAllocationRequest.FromString,
                    response_serializer=payment__pb2.FeeAllocationResponse.SerializeToString,
            ),
            'AllocateFeeForStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateFeeForStudent,
                    request_deserializer=payment__pb2.AllocateFeeForStudentRequest.FromString,
                    response_serializer=payment__pb2.AllocateFeeForStudentResponse.SerializeToString,
            ),
            'GetStudentFees': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStudentFees,
                    request_deserializer=payment__pb2.StudentFeeRequest.FromString,
                    response_serializer=payment__pb2.StudentFeeListResponse.SerializeToString,
            ),
            'GetPaymentOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPaymentOptions,
                    request_deserializer=payment__pb2.Empty.FromString,
                    response_serializer=payment__pb2.PaymentOptionsResponse.SerializeToString,
            ),
            'InitiatePayment': grpc.unary_unary_rpc_method_handler(
                    servicer.InitiatePayment,
                    request_deserializer=payment__pb2.InitiatePaymentRequest.FromString,
                    response_serializer=payment__pb2.InitiatePaymentResponse.SerializeToString,
            ),
            'VerifyRazorpayPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyRazorpayPayment,
                    request_deserializer=payment__pb2.VerifyRazorpayRequest.FromString,
                    response_serializer=payment__pb2.VerifyRazorpayResponse.SerializeToString,
            ),
            'SimulateRazorpayPayment': grpc.unary_unary_rpc_method_handler(
                    servicer.SimulateRazorpayPayment,
                    request_deserializer=payment__pb2.SimulateRazorpayRequest.FromString,
                    response_serializer=payment__pb2.SimulateRazorpayResponse.SerializeToString,
            ),
            'GetStudent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStudent,
                    request_deserializer=payment__pb2.GetStudentRequest.FromString,
                    response_serializer=payment__pb2.GetStudentResponse.SerializeToString,
            ),
            'GenerateReceipt': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateReceipt,
                    request_deserializer=payment__pb2.GenerateReceiptRequest.FromString,
                    response_serializer=payment__pb2.GenerateReceiptResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'payment.PaymentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('payment.PaymentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PaymentService(object):
    """Service
    """

    @staticmethod
    def AllocateFee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/AllocateFee',
            payment__pb2.FeeAllocationRequest.SerializeToString,
            payment__pb2.FeeAllocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateFeeForStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/AllocateFeeForStudent',
            payment__pb2.AllocateFeeForStudentRequest.SerializeToString,
            payment__pb2.AllocateFeeForStudentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStudentFees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/GetStudentFees',
            payment__pb2.StudentFeeRequest.SerializeToString,
            payment__pb2.StudentFeeListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPaymentOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/GetPaymentOptions',
            payment__pb2.Empty.SerializeToString,
            payment__pb2.PaymentOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InitiatePayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/InitiatePayment',
            payment__pb2.InitiatePaymentRequest.SerializeToString,
            payment__pb2.InitiatePaymentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def VerifyRazorpayPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/VerifyRazorpayPayment',
            payment__pb2.VerifyRazorpayRequest.SerializeToString,
            payment__pb2.VerifyRazorpayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimulateRazorpayPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/SimulateRazorpayPayment',
            payment__pb2.SimulateRazorpayRequest.SerializeToString,
            payment__pb2.SimulateRazorpayResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStudent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/GetStudent',
            payment__pb2.GetStudentRequest.SerializeToString,
            payment__pb2.GetStudentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GenerateReceipt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/payment.PaymentService/GenerateReceipt',
            payment__pb2.GenerateReceiptRequest.SerializeToString,
            payment__pb2.GenerateReceiptResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
